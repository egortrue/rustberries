fn main() {
    // Переменная s1 представляет собой строковый литерал "hello"
    // Строковые литералы в Rust хранятся как последовательности символов в памяти и имеют фиксированный размер
    let s1 = "hello";

    // Переменная s2 представляет собой объект типа String
    // Объекты String содержат помимо самих данных также дополнительную информацию: например,длина строки
    let s2 = String::from("hello");

    // s3 представляет собой результат вызова метода as_str() у объекта String
    // Этот метод возвращает указатель на внутреннюю память объекта String, где хранится сама строка
    let s3 = s2.as_str();

    // Получим количество байт, занимаемых строковым литералом. Обычно это будет количество байт
    // необходимое для хранения букв "h", "e", "l", "l", "o" плюс нулевой символ в конце
    let size_of_s1 = std::mem::size_of_val(s1);

    // получим количество байт занимаемое объектом String, включая данные и метаинформацию
    let size_of_s2 = std::mem::size_of_val(&s2);

    // Получим количество байт, занимаемое указателем на строку
    let size_of_s3 = std::mem::size_of_val(&s3);

    // 5
    println!("{:?}", size_of_s1);

    // 24
    println!("{:?}", size_of_s2);

    // 16
    println!("{:?}", size_of_s3);
}
